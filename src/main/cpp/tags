!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BLACK	./table.h	/^static const int BLACK = 2;$/;"	v
EMPTY	./table.h	/^static const int EMPTY = 0;$/;"	v
MAX_LONG	./node.h	/^        static const int MAX_LONG = 100;$/;"	m	class:Node
Mill	./mill.cpp	/^Mill::Mill() {$/;"	f	class:Mill
Mill	./mill.h	/^class Mill {$/;"	c
Move	./move.cpp	/^Move::Move() {$/;"	f	class:Move
Move	./move.cpp	/^Move::Move(int l, bool cap, int a) : Move() {$/;"	f	class:Move
Move	./move.cpp	/^Move::Move(int l, bool cap, int a, int b) : Move(l, cap, a) {$/;"	f	class:Move
Move	./move.cpp	/^Move::Move(int l, bool cap, int a, int b, int c) : Move(l, cap, a, b) {$/;"	f	class:Move
Move	./move.h	/^struct Move {$/;"	s
MovetHasher	./mill.cpp	/^struct MovetHasher {$/;"	s	file:
Node	./node.cpp	/^Node::Node(Table *t, int nn) {$/;"	f	class:Node
Node	./node.h	/^class Node {$/;"	c
Point	./mill.cpp	/^    Point() {$/;"	f	struct:Point
Point	./mill.cpp	/^struct Point {$/;"	s	file:
Table	./table.cpp	/^Table::Table() {$/;"	f	class:Table
Table	./table.cpp	/^Table::Table(const Table *t) : Table() {$/;"	f	class:Table
Table	./table.h	/^struct Table {$/;"	s
TableData	./table.h	/^struct TableData {$/;"	s
WHITE	./table.h	/^static const int WHITE = 1;$/;"	v
arity	./node.cpp	/^int Node::arity() {$/;"	f	class:Node
backupPosition	./table.cpp	/^void Table::backupPosition(const Table* const t) {$/;"	f	class:Table
backupTable	./node.h	/^        Table *backupTable;$/;"	m	class:Node
bestMoveStr	./mill.h	/^        std::string bestMoveStr;$/;"	m	class:Mill
blackHand	./table.h	/^        int blackHand;$/;"	m	struct:TableData
capture	./move.h	/^    bool capture;$/;"	m	struct:Move
children	./node.h	/^        std::vector<Node*> children;$/;"	m	class:Node
clearHistory	./mill.cpp	/^void Mill::clearHistory() {$/;"	f	class:Mill
coordHelper	./move.cpp	/^int coordHelper[72] = {$/;"	v
currMove	./node.h	/^        Move currMove;$/;"	m	class:Node
data	./table.h	/^        TableData data;$/;"	m	struct:Table
debug	./mill.h	/^        bool debug;$/;"	m	class:Mill
epsilon	./node.h	/^        static constexpr double epsilon = 1e-6;$/;"	m	class:Node
evaluate	./node.cpp	/^int Node::evaluate(const Node *newNode) {$/;"	f	class:Node
expand	./node.cpp	/^void Node::expand() {$/;"	f	class:Node
getAllMoves	./table.cpp	/^vector<Move> Table::getAllMoves() {$/;"	f	class:Table
getBest	./node.cpp	/^Node *Node::getBest() {$/;"	f	class:Node
getBestMoveOneThread	./mill.cpp	/^void Mill::getBestMoveOneThread(Node *move) {$/;"	f	class:Mill
getBlackHand	./table.cpp	/^int Table::getBlackHand() const {$/;"	f	class:Table
getChildren	./node.cpp	/^vector<Node*> Node::getChildren() {$/;"	f	class:Node
getField	./table.cpp	/^int Table::getField(int idx) const {$/;"	f	class:Table
getHistory	./mill.cpp	/^vector<string> Mill::getHistory() {$/;"	f	class:Mill
getHistoryIdx	./mill.cpp	/^int Mill::getHistoryIdx() {$/;"	f	class:Mill
getIdx	./move.cpp	/^int Move::getIdx(int x, int y) {$/;"	f	class:Move
getMove	./move.cpp	/^Move Move::getMove(const string &input) {$/;"	f	class:Move
getNofPiece	./table.cpp	/^int Table::getNofPiece(int color) const {$/;"	f	class:Table
getTableData	./table.cpp	/^TableData Table::getTableData() const {$/;"	f	class:Table
getTerminateMoves	./node.cpp	/^vector<Move> Node::getTerminateMoves() {$/;"	f	class:Node
getWhiteHand	./table.cpp	/^int Table::getWhiteHand() const {$/;"	f	class:Table
hasSoloMorris	./table.cpp	/^bool Table::hasSoloMorris(int color) const {$/;"	f	class:Table
history	./mill.h	/^        std::vector<std::string> history;$/;"	m	class:Mill
historyIdx	./mill.h	/^        int historyIdx;$/;"	m	class:Mill
idx	./node.h	/^        int idx = 0;$/;"	m	class:Node
initData	./table.h	/^        TableData initData;$/;"	m	struct:Table
initRules	./table.cpp	/^void Table::initRules() {$/;"	f	class:Table
initTable	./mill.cpp	/^void Mill::initTable(bool historyClear) {$/;"	f	class:Mill
initTable	./table.cpp	/^void Table::initTable() {$/;"	f	class:Table
isEnd	./table.cpp	/^int Table::isEnd() {$/;"	f	class:Table
isLeaf	./node.cpp	/^bool Node::isLeaf() {$/;"	f	class:Node
isMill	./table.cpp	/^bool Table::isMill(int idx, int color) const {$/;"	f	class:Table
isNeighbor	./table.cpp	/^bool Table::isNeighbor(int idx1, int idx2) const {$/;"	f	class:Table
length	./move.h	/^    int length;$/;"	m	struct:Move
main	./main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	./response.cpp	/^int main(int argc, char **argv) {$/;"	f
main	./test.cpp	/^int main() {$/;"	f
make_test_is_end	./test.cpp	/^void make_test_is_end(Mill *mill, int expected) {$/;"	f
make_test_move_check	./test.cpp	/^void make_test_move_check(Mill *mill, const string &move, int expected) {$/;"	f
mill	./table.h	/^        int mill[24][4];$/;"	m	struct:Table
millHelper	./table.cpp	/^int millHelper[] = {$/;"	v
millNeighbors	./table.cpp	/^int millNeighbors[] = {$/;"	v
move	./mill.cpp	/^int Mill::move(Move move, bool updateHistory) {$/;"	f	class:Mill
moveCheck	./table.cpp	/^int Table::moveCheck(Move move, bool updateHistory) {$/;"	f	class:Table
moveCheck	./table.cpp	/^int Table::moveCheck(int i, bool makeMove) {$/;"	f	class:Table
moveCheck	./table.cpp	/^int Table::moveCheck(int i1, int i2, bool makeMove, int n_white, int n_black) {$/;"	f	class:Table
moveCheck	./table.cpp	/^int Table::moveCheck(int i1, int i2, int i3, bool makeMove, int n_white, int n_black) {$/;"	f	class:Table
n	./mill.h	/^        int n;$/;"	m	class:Mill
n	./node.h	/^        int n;$/;"	m	class:Node
nActions	./node.h	/^        static const int nActions = 10;$/;"	m	class:Node
nVisits	./mill.cpp	/^    double nVisits;$/;"	m	struct:Point	file:
nVisits	./node.h	/^        double nVisits;$/;"	m	class:Node
nextDouble	./node.cpp	/^double Node::nextDouble() {$/;"	f	class:Node
operator ()	./mill.cpp	/^    size_t operator()(const Move &m) const {$/;"	f	struct:MovetHasher
operator ==	./move.h	/^    bool operator==(const Move &other) const {$/;"	f	struct:Move
operator ==	./node.h	/^        bool operator==(const Node &other) {$/;"	f	class:Node
print	./node.cpp	/^void Node::print() {$/;"	f	class:Node
printTable	./table.cpp	/^void Table::printTable() {$/;"	f	class:Table
restoreInitTable	./table.cpp	/^void Table::restoreInitTable() {$/;"	f	class:Table
restorePosition	./table.cpp	/^void Table::restorePosition(Table* const t) const {$/;"	f	class:Table
select	./node.cpp	/^Node *Node::select(int depth) {$/;"	f	class:Node
selectAction	./node.cpp	/^void Node::selectAction() {$/;"	f	class:Node
setBestMoveMCTS	./mill.cpp	/^void Mill::setBestMoveMCTS() {$/;"	f	class:Mill
setHistoryIdx	./mill.cpp	/^void Mill::setHistoryIdx(int idx) {$/;"	f	class:Mill
setPos	./table.cpp	/^void Table::setPos(int *t, int w, int b, bool wToMove) {$/;"	f	class:Table
table	./mill.h	/^        Table *table;$/;"	m	class:Mill
table	./node.h	/^        Table *table;$/;"	m	class:Node
table	./table.h	/^        int table[24];$/;"	m	struct:TableData
test_best_move	./test.cpp	/^void test_best_move() {$/;"	f
test_getMove	./test.cpp	/^void test_getMove() {$/;"	f
test_isEnd	./test.cpp	/^void test_isEnd() {$/;"	f
test_moveXX	./test.cpp	/^void test_moveXX() {$/;"	f
test_move_class	./test.cpp	/^void test_move_class() {$/;"	f
test_speed	./test.cpp	/^void test_speed() {$/;"	f
thinking	./mill.h	/^        bool thinking;$/;"	m	class:Mill
toString	./move.cpp	/^string Move::toString() const {$/;"	f	class:Move
totValue	./mill.cpp	/^    double totValue;$/;"	m	struct:Point	file:
totValue	./node.h	/^        double totValue;$/;"	m	class:Node
updateStats	./node.cpp	/^void Node::updateStats(int value) {$/;"	f	class:Node
updateTable	./mill.cpp	/^void Mill::updateTable() {$/;"	f	class:Mill
whiteHand	./table.h	/^        int whiteHand;$/;"	m	struct:TableData
whiteToMove	./table.h	/^        bool whiteToMove;$/;"	m	struct:TableData
x	./move.h	/^    int x;$/;"	m	struct:Move
y	./move.h	/^    int y;$/;"	m	struct:Move
z	./move.h	/^    int z;$/;"	m	struct:Move
~Mill	./mill.cpp	/^Mill::~Mill() {$/;"	f	class:Mill
~Move	./move.cpp	/^Move::~Move() {$/;"	f	class:Move
~Node	./node.cpp	/^Node::~Node() {$/;"	f	class:Node
~Table	./table.cpp	/^Table::~Table() {$/;"	f	class:Table
